package com.hzlh.kzq.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.hzlh.kzq.data.model.DevicesData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICES_DATA".
*/
public class DevicesDataDao extends AbstractDao<DevicesData, Long> {

    public static final String TABLENAME = "DEVICES_DATA";

    /**
     * Properties of entity DevicesData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Device_id = new Property(0, Long.class, "device_id", true, "_id");
        public final static Property Device_name = new Property(1, String.class, "device_name", false, "DEVICE_NAME");
        public final static Property Device_type = new Property(2, String.class, "device_type", false, "DEVICE_TYPE");
        public final static Property Device_status = new Property(3, String.class, "device_status", false, "DEVICE_STATUS");
        public final static Property Value_1 = new Property(4, String.class, "value_1", false, "VALUE_1");
        public final static Property Value_2 = new Property(5, String.class, "value_2", false, "VALUE_2");
        public final static Property Value_3 = new Property(6, String.class, "value_3", false, "VALUE_3");
        public final static Property Value_4 = new Property(7, String.class, "value_4", false, "VALUE_4");
        public final static Property Value_5 = new Property(8, String.class, "value_5", false, "VALUE_5");
        public final static Property Value_6 = new Property(9, String.class, "value_6", false, "VALUE_6");
        public final static Property Value_7 = new Property(10, String.class, "value_7", false, "VALUE_7");
        public final static Property Value_8 = new Property(11, String.class, "value_8", false, "VALUE_8");
    }


    public DevicesDataDao(DaoConfig config) {
        super(config);
    }
    
    public DevicesDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICES_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: device_id
                "\"DEVICE_NAME\" TEXT," + // 1: device_name
                "\"DEVICE_TYPE\" TEXT," + // 2: device_type
                "\"DEVICE_STATUS\" TEXT," + // 3: device_status
                "\"VALUE_1\" TEXT," + // 4: value_1
                "\"VALUE_2\" TEXT," + // 5: value_2
                "\"VALUE_3\" TEXT," + // 6: value_3
                "\"VALUE_4\" TEXT," + // 7: value_4
                "\"VALUE_5\" TEXT," + // 8: value_5
                "\"VALUE_6\" TEXT," + // 9: value_6
                "\"VALUE_7\" TEXT," + // 10: value_7
                "\"VALUE_8\" TEXT);"); // 11: value_8
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICES_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DevicesData entity) {
        stmt.clearBindings();
 
        Long device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindLong(1, device_id);
        }
 
        String device_name = entity.getDevice_name();
        if (device_name != null) {
            stmt.bindString(2, device_name);
        }
 
        String device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindString(3, device_type);
        }
 
        String device_status = entity.getDevice_status();
        if (device_status != null) {
            stmt.bindString(4, device_status);
        }
 
        String value_1 = entity.getValue_1();
        if (value_1 != null) {
            stmt.bindString(5, value_1);
        }
 
        String value_2 = entity.getValue_2();
        if (value_2 != null) {
            stmt.bindString(6, value_2);
        }
 
        String value_3 = entity.getValue_3();
        if (value_3 != null) {
            stmt.bindString(7, value_3);
        }
 
        String value_4 = entity.getValue_4();
        if (value_4 != null) {
            stmt.bindString(8, value_4);
        }
 
        String value_5 = entity.getValue_5();
        if (value_5 != null) {
            stmt.bindString(9, value_5);
        }
 
        String value_6 = entity.getValue_6();
        if (value_6 != null) {
            stmt.bindString(10, value_6);
        }
 
        String value_7 = entity.getValue_7();
        if (value_7 != null) {
            stmt.bindString(11, value_7);
        }
 
        String value_8 = entity.getValue_8();
        if (value_8 != null) {
            stmt.bindString(12, value_8);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DevicesData entity) {
        stmt.clearBindings();
 
        Long device_id = entity.getDevice_id();
        if (device_id != null) {
            stmt.bindLong(1, device_id);
        }
 
        String device_name = entity.getDevice_name();
        if (device_name != null) {
            stmt.bindString(2, device_name);
        }
 
        String device_type = entity.getDevice_type();
        if (device_type != null) {
            stmt.bindString(3, device_type);
        }
 
        String device_status = entity.getDevice_status();
        if (device_status != null) {
            stmt.bindString(4, device_status);
        }
 
        String value_1 = entity.getValue_1();
        if (value_1 != null) {
            stmt.bindString(5, value_1);
        }
 
        String value_2 = entity.getValue_2();
        if (value_2 != null) {
            stmt.bindString(6, value_2);
        }
 
        String value_3 = entity.getValue_3();
        if (value_3 != null) {
            stmt.bindString(7, value_3);
        }
 
        String value_4 = entity.getValue_4();
        if (value_4 != null) {
            stmt.bindString(8, value_4);
        }
 
        String value_5 = entity.getValue_5();
        if (value_5 != null) {
            stmt.bindString(9, value_5);
        }
 
        String value_6 = entity.getValue_6();
        if (value_6 != null) {
            stmt.bindString(10, value_6);
        }
 
        String value_7 = entity.getValue_7();
        if (value_7 != null) {
            stmt.bindString(11, value_7);
        }
 
        String value_8 = entity.getValue_8();
        if (value_8 != null) {
            stmt.bindString(12, value_8);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DevicesData readEntity(Cursor cursor, int offset) {
        DevicesData entity = new DevicesData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // device_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // device_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // device_type
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // device_status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // value_1
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // value_2
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // value_3
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // value_4
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // value_5
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // value_6
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // value_7
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // value_8
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DevicesData entity, int offset) {
        entity.setDevice_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDevice_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDevice_type(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDevice_status(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setValue_1(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValue_2(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setValue_3(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setValue_4(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setValue_5(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setValue_6(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setValue_7(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setValue_8(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DevicesData entity, long rowId) {
        entity.setDevice_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DevicesData entity) {
        if(entity != null) {
            return entity.getDevice_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DevicesData entity) {
        return entity.getDevice_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
